---
- name: Check if host is running Proxmox
  hosts: all
  become: yes
  gather_facts: false
  tasks:
    - name: Check Proxmox version
      ansible.builtin.command:
        cmd: pveversion
      register: pve_version
      failed_when: pve_version.rc != 0
      changed_when: false

    - name: Verify Proxmox is installed
      ansible.builtin.assert:
        that:
          - "'pve-manager' in pve_version.stdout"
        fail_msg: "This host does not appear to be running Proxmox VE"
        success_msg: "Proxmox VE detected: {{ pve_version.stdout }}"

- name: Download Ubuntu Cloud Image, Create Proxmox VM, and Create Template
  hosts: all
  become: yes
  gather_facts: false
  tasks:
    - name: Prepare environment
      block:
        - name: Ensure destination directory exists
          ansible.builtin.file:
            path: "/var/lib/vz/template/iso"
            state: directory
            mode: '0755'

        - name: Install libguestfs-tools
          ansible.builtin.apt:
            name: libguestfs-tools
            state: present
            update_cache: yes
          register: apt_result
          until: apt_result is success
          retries: 3
          delay: 5


    - name: Prepare Ubuntu cloud image
      block:
        - name: Check if Ubuntu cloud image exists
          ansible.builtin.stat:
            path: "{{ DESTINATION_PATH }}"
          register: image_stat

        - name: Get SHA256 checksum of the remote file
          ansible.builtin.set_fact:
            remote_checksum: "{{ lookup('url', IMAGE_URL | regex_replace('[^/]+$', '') + 'SHA256SUMS') 
                                | regex_search('([a-f0-9]{64})\\s*\\*' + (IMAGE_URL | basename), '\\1') 
                                | default('', true) 
                                | first }}"

        - name: Download and verify Ubuntu cloud image
          ansible.builtin.get_url:
            url: "{{ IMAGE_URL }}"
            dest: "{{ DESTINATION_PATH }}"
            mode: '0644'
            checksum: "sha256:{{ remote_checksum }}"
          when: >
            not image_stat.stat.exists or
            (image_stat.stat.checksum is defined and image_stat.stat.checksum != remote_checksum)
          register: DOWNLOAD_RESULT

        - name: Create a copy of the Ubuntu cloud image
          ansible.builtin.copy:
            src: "{{ DESTINATION_PATH }}"
            dest: "{{ DESTINATION_PATH }}.modified"
            remote_src: yes

        - name: Resize copied Ubuntu cloud image if needed
          ansible.builtin.shell: |
            current_size=$(qemu-img info {{ DESTINATION_PATH }}.modified | grep 'virtual size' | awk '{print $3}')
            if [ "$current_size" != "{{ VM_ROOT_SIZE }}" ]; then
              qemu-img resize -f qcow2 {{ DESTINATION_PATH }}.modified {{ VM_ROOT_SIZE }}
            fi
          register: RESIZE_RESULT
          changed_when: RESIZE_RESULT.stdout != ""

        - name: Install packages in the copied cloud image
          ansible.builtin.command:
            cmd: virt-customize -a {{ DESTINATION_PATH }}.modified --install {{ PACKAGES | join(",") }} --run-command 'apt update && apt upgrade -y'

        - name: Set timezone to {{ TIMEZONE }}
          ansible.builtin.command:
            cmd: virt-customize -a {{ DESTINATION_PATH }}.modified --timezone "{{ TIMEZONE }}"
          register: TIMEZONE_RESULT
          changed_when: TIMEZONE_RESULT.rc == 0

        - name: Disable MOTD messages in image
          ansible.builtin.command:
            cmd: >
              virt-customize -v -a {{ DESTINATION_PATH }}.modified 
              --run-command 'chmod -x /etc/update-motd.d/*'
              --run-command 'chmod +x /etc/update-motd.d/50-landscape-sysinfo'
              --run-command 'echo "ENABLED=0" > /etc/default/motd-news'
          ignore_errors: yes
          when: DISTRIBUTION == 'ubuntu'


    - name: Check existing vm
      community.general.proxmox_vm_info:
        api_user: "{{ PROXMOX_USER }}@pam"
        api_password: "{{ PROXMOX_PASSWORD }}"
        api_host: "{{ PROXMOX_HOST }}"
        node: "{{ PROXMOX_NODE }}"
        vmid: "{{ VM_VMID }}"
      register: VM_INFO

    - name: Stop and remove existing VM if it exists
      when: VM_INFO.proxmox_vms | length > 0
      block:
        - name: Stop existing VM if running
          ansible.builtin.command:
            cmd: "qm stop {{ VM_VMID }}"
          register: STOP_RESULT
          changed_when: STOP_RESULT.rc == 0
          when: VM_INFO.proxmox_vms[0].status == 'running'
          ignore_errors: yes

        - name: Remove existing VM
          ansible.builtin.command:
            cmd: "qm destroy {{ VM_VMID }} --purge"
          register: DESTROY_RESULT
          until: DESTROY_RESULT.rc == 0
          retries: 3
          delay: 5

    - name: Create and configure new VM
      block:
        - name: Create new VM in Proxmox
          community.general.proxmox_kvm:
            api_user: "{{ PROXMOX_USER }}@pam"
            api_password: "{{ PROXMOX_PASSWORD }}"
            api_host: "{{ PROXMOX_HOST }}"
            node: "{{ PROXMOX_NODE }}"
            vmid: "{{ VM_VMID }}"
            name: "{{ VM_NAME }}"
            machine: "{{ VM_MACHINE }}"
            memory: "{{ VM_MEMORY }}"
            cpu: "{{ VM_CPU }}"
            cores: "{{ VM_CORES }}"
            ostype: "l26"
            net:
              net0: "virtio,bridge={{ VM_BRIDGE }}"
            state: present

        - name: Import and configure disk
          ansible.builtin.shell: >
            qm importdisk {{ VM_VMID }} {{ DESTINATION_PATH }}.modified {{ STORAGE_POOL }} &&
            qm set {{ VM_VMID }} 
            --scsihw virtio-scsi-pci 
            --virtio0 {{ STORAGE_POOL }}:vm-{{ VM_VMID }}-disk-0,discard=on,iothread=1
            --ide0 {{ STORAGE_POOL }}:cloudinit
            --boot c --bootdisk virtio0 
            --agent enabled=1
            --serial0 socket 
            --vga serial0
          args:
            creates: "/var/lib/vz/images/{{ VM_VMID }}/vm-{{ VM_VMID }}-disk-0.raw"

        - name: Configure cloud-init
          block:
            - name: Create temporary SSH key file
              ansible.builtin.copy:
                content: "{{ SSH_PUBLIC_KEYS }}"
                dest: "/tmp/ssh_key_{{ VM_VMID }}.pub"
                mode: '0600'
            
            - name: Set cloud-init configurations
              ansible.builtin.shell: >
                qm set {{ VM_VMID }}
                --ciuser {{ CLOUD_INIT_USER }}
                --cipassword {{ CLOUD_INIT_PASSWORD }}
                --sshkeys "/tmp/ssh_key_{{ VM_VMID }}.pub"
                --ciupgrade 0
                --ipconfig0 'ip=dhcp'
                --ipconfig1 ''

            - name: Remove temporary SSH key file
              ansible.builtin.file:
                path: "/tmp/ssh_key_{{ VM_VMID }}.pub"
                state: absent

    - name: Finalize
      block:
        - name: Convert VM to template
          ansible.builtin.command:
            cmd: qm template {{ VM_VMID }}

        - name: Verify template creation
          community.general.proxmox_vm_info:
            api_user: "{{ PROXMOX_USER }}@pam"
            api_password: "{{ PROXMOX_PASSWORD }}"
            api_host: "{{ PROXMOX_HOST }}"
            node: "{{ PROXMOX_NODE }}"
            vmid: "{{ VM_VMID }}"
          register: FINAL_VM_INFO

        - name: Cleanup modified image file
          ansible.builtin.file:
            path: "{{ DESTINATION_PATH }}.modified"
            state: absent
          when: FINAL_VM_INFO is defined and FINAL_VM_INFO.proxmox_vms | length > 0

        - name: Display results
          ansible.builtin.debug:
            msg:
              - "Download Result = {{ DOWNLOAD_RESULT }}"
              - "Resize Result = {{ RESIZE_RESULT }}"
              - "VM Info = {{ FINAL_VM_INFO }}"